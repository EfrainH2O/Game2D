//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerMapControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMapControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMapControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMapControlls"",
    ""maps"": [
        {
            ""name"": ""Platforming"",
            ""id"": ""ae97c757-ddaf-4c8b-83e7-7c403657529e"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMov"",
                    ""type"": ""Value"",
                    ""id"": ""e428cf45-4103-430d-8551-7a3643919ae5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""371d7f5c-1902-4f77-90a3-09ee5b4a13c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePower"",
                    ""type"": ""Button"",
                    ""id"": ""ac9b8165-98cc-49fb-b592-2164d6610d09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""059fd241-17e0-4921-9d9f-a3f0a2f70aa8"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMov"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fe4c8819-b8e6-49a8-83fb-022d8a46aa3a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMov"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c1410196-e916-46be-a489-ac3798c70bcf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMov"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a436e6de-a696-430f-b884-3c9b1eb6256b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMov"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5058b3ef-aa3d-4d21-87a8-0ebf0f4ae81b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mixed"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b15f8d12-4467-4684-9048-7aaae1352d07"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mixed"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7a0ff76-28ca-4f01-80f1-522f81719274"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1416debf-163a-4718-83ea-d7a365bae7cb"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Powers"",
            ""id"": ""e8dcf415-3c02-45e3-ba52-2df8d794f7ce"",
            ""actions"": [
                {
                    ""name"": ""UsePower"",
                    ""type"": ""Button"",
                    ""id"": ""929ed860-0ef4-4d70-871b-b7d83b158264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6219209e-6ac6-4a47-8939-832798f20512"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UsePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04493d95-8a9f-44aa-baf6-e6dea7e1e0ab"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UsePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Flying"",
            ""id"": ""6109ba11-6751-48f0-a501-fc14fb183d43"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""641dc09f-8ecb-48b3-8439-569fb5b35083"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Burst"",
                    ""type"": ""Button"",
                    ""id"": ""a16586c1-4a6a-44e3-9d70-dfdc015a8acf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ec2245b-7c2a-4847-8618-f93c646be4ca"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ddcc0f0b-066c-4227-8625-aff311829d5e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e3ab2b1a-dc2c-4c48-88ae-0dc32ce802d0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""538bf3c0-d5ac-41bd-b9d1-303c6ab03cae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb903a55-bb55-4da0-8fca-1bdd72c78a49"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f741c0e0-d2cd-4684-b560-97fe5ae20d96"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bcf77b13-94cf-4f6c-aa83-b95cb794d897"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Burst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""488256af-2cb8-442e-b68f-d1144a5cb755"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Burst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mixed"",
            ""bindingGroup"": ""Mixed"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Platforming
        m_Platforming = asset.FindActionMap("Platforming", throwIfNotFound: true);
        m_Platforming_HorizontalMov = m_Platforming.FindAction("HorizontalMov", throwIfNotFound: true);
        m_Platforming_Jump = m_Platforming.FindAction("Jump", throwIfNotFound: true);
        m_Platforming_TogglePower = m_Platforming.FindAction("TogglePower", throwIfNotFound: true);
        // Powers
        m_Powers = asset.FindActionMap("Powers", throwIfNotFound: true);
        m_Powers_UsePower = m_Powers.FindAction("UsePower", throwIfNotFound: true);
        // Flying
        m_Flying = asset.FindActionMap("Flying", throwIfNotFound: true);
        m_Flying_Rotation = m_Flying.FindAction("Rotation", throwIfNotFound: true);
        m_Flying_Burst = m_Flying.FindAction("Burst", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Platforming
    private readonly InputActionMap m_Platforming;
    private List<IPlatformingActions> m_PlatformingActionsCallbackInterfaces = new List<IPlatformingActions>();
    private readonly InputAction m_Platforming_HorizontalMov;
    private readonly InputAction m_Platforming_Jump;
    private readonly InputAction m_Platforming_TogglePower;
    public struct PlatformingActions
    {
        private @PlayerMapControlls m_Wrapper;
        public PlatformingActions(@PlayerMapControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMov => m_Wrapper.m_Platforming_HorizontalMov;
        public InputAction @Jump => m_Wrapper.m_Platforming_Jump;
        public InputAction @TogglePower => m_Wrapper.m_Platforming_TogglePower;
        public InputActionMap Get() { return m_Wrapper.m_Platforming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlatformingActions set) { return set.Get(); }
        public void AddCallbacks(IPlatformingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlatformingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlatformingActionsCallbackInterfaces.Add(instance);
            @HorizontalMov.started += instance.OnHorizontalMov;
            @HorizontalMov.performed += instance.OnHorizontalMov;
            @HorizontalMov.canceled += instance.OnHorizontalMov;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @TogglePower.started += instance.OnTogglePower;
            @TogglePower.performed += instance.OnTogglePower;
            @TogglePower.canceled += instance.OnTogglePower;
        }

        private void UnregisterCallbacks(IPlatformingActions instance)
        {
            @HorizontalMov.started -= instance.OnHorizontalMov;
            @HorizontalMov.performed -= instance.OnHorizontalMov;
            @HorizontalMov.canceled -= instance.OnHorizontalMov;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @TogglePower.started -= instance.OnTogglePower;
            @TogglePower.performed -= instance.OnTogglePower;
            @TogglePower.canceled -= instance.OnTogglePower;
        }

        public void RemoveCallbacks(IPlatformingActions instance)
        {
            if (m_Wrapper.m_PlatformingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlatformingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlatformingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlatformingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlatformingActions @Platforming => new PlatformingActions(this);

    // Powers
    private readonly InputActionMap m_Powers;
    private List<IPowersActions> m_PowersActionsCallbackInterfaces = new List<IPowersActions>();
    private readonly InputAction m_Powers_UsePower;
    public struct PowersActions
    {
        private @PlayerMapControlls m_Wrapper;
        public PowersActions(@PlayerMapControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UsePower => m_Wrapper.m_Powers_UsePower;
        public InputActionMap Get() { return m_Wrapper.m_Powers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PowersActions set) { return set.Get(); }
        public void AddCallbacks(IPowersActions instance)
        {
            if (instance == null || m_Wrapper.m_PowersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PowersActionsCallbackInterfaces.Add(instance);
            @UsePower.started += instance.OnUsePower;
            @UsePower.performed += instance.OnUsePower;
            @UsePower.canceled += instance.OnUsePower;
        }

        private void UnregisterCallbacks(IPowersActions instance)
        {
            @UsePower.started -= instance.OnUsePower;
            @UsePower.performed -= instance.OnUsePower;
            @UsePower.canceled -= instance.OnUsePower;
        }

        public void RemoveCallbacks(IPowersActions instance)
        {
            if (m_Wrapper.m_PowersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPowersActions instance)
        {
            foreach (var item in m_Wrapper.m_PowersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PowersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PowersActions @Powers => new PowersActions(this);

    // Flying
    private readonly InputActionMap m_Flying;
    private List<IFlyingActions> m_FlyingActionsCallbackInterfaces = new List<IFlyingActions>();
    private readonly InputAction m_Flying_Rotation;
    private readonly InputAction m_Flying_Burst;
    public struct FlyingActions
    {
        private @PlayerMapControlls m_Wrapper;
        public FlyingActions(@PlayerMapControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Flying_Rotation;
        public InputAction @Burst => m_Wrapper.m_Flying_Burst;
        public InputActionMap Get() { return m_Wrapper.m_Flying; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyingActions set) { return set.Get(); }
        public void AddCallbacks(IFlyingActions instance)
        {
            if (instance == null || m_Wrapper.m_FlyingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlyingActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Burst.started += instance.OnBurst;
            @Burst.performed += instance.OnBurst;
            @Burst.canceled += instance.OnBurst;
        }

        private void UnregisterCallbacks(IFlyingActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Burst.started -= instance.OnBurst;
            @Burst.performed -= instance.OnBurst;
            @Burst.canceled -= instance.OnBurst;
        }

        public void RemoveCallbacks(IFlyingActions instance)
        {
            if (m_Wrapper.m_FlyingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlyingActions instance)
        {
            foreach (var item in m_Wrapper.m_FlyingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlyingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlyingActions @Flying => new FlyingActions(this);
    private int m_MixedSchemeIndex = -1;
    public InputControlScheme MixedScheme
    {
        get
        {
            if (m_MixedSchemeIndex == -1) m_MixedSchemeIndex = asset.FindControlSchemeIndex("Mixed");
            return asset.controlSchemes[m_MixedSchemeIndex];
        }
    }
    public interface IPlatformingActions
    {
        void OnHorizontalMov(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnTogglePower(InputAction.CallbackContext context);
    }
    public interface IPowersActions
    {
        void OnUsePower(InputAction.CallbackContext context);
    }
    public interface IFlyingActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnBurst(InputAction.CallbackContext context);
    }
}
